esphome:
  name: ${device_name}
  comment: $device_description
  project:
    name: "SiliconAvatar.KMC30608_Package"
    version: "2022.12.19"
  on_boot:
    - priority: -100
      then:
      - if:
          condition:
            lambda: 'return ( (id(select_led).state == "Normal On") );'
          then:
            light.turn_on: blue_led
esp8266:
  restore_from_flash: true
  board: esp8285

# Enable logging
logger:
  baud_rate: 0

sensor:
  - platform: hlw8012
    model: HLW8012
    sel_pin:
      number: 12
      inverted: True
    cf_pin: 4
    cf1_pin: 5
    voltage:
      name: $friendly_name Voltage
      unit_of_measurement: V
      accuracy_decimals: 1
      device_class: "voltage"
      state_class: "measurement"
      filters:
      - sliding_window_moving_average:
          window_size: 3
          send_every: 3
    power:
      name: $friendly_name Power
      unit_of_measurement: W
      accuracy_decimals: 1
      device_class: "power"
      state_class: "measurement"
      id: power
      filters:
      - sliding_window_moving_average:
          window_size: 3
          send_every: 3
      on_value:   # set or clear in_use template binary sensor depending on whether power usage is over threshold
        - if:
            condition:
              lambda: 'return (x >= id(threshold).state);'
            then:
              - binary_sensor.template.publish:
                  id: in_use
                  state: ON
            else:
              - binary_sensor.template.publish:
                  id: in_use
                  state: OFF
    current:
      name: $friendly_name Current
      unit_of_measurement: A
      accuracy_decimals: 2
      device_class: "current"
      state_class: "measurement"
      filters:
      - sliding_window_moving_average:
          window_size: 3
          send_every: 3
    voltage_divider: ${voltage_divider_value} #1750 for bedroom TV
    current_resistor: ${current_resistor_value} #0.001 for all
    update_interval: 2s

  # Reports the total Power so-far each day, resets at midnight
  # See https://esphome.io/components/sensor/total_daily_energy.html
  - platform: total_daily_energy
    name: $friendly_name Total Daily Energy
    power_id: power
    device_class: "energy"
    state_class: "total_increasing"
    filters:
        - multiply: 0.001  ## convert Wh to kWh
    unit_of_measurement: kWh

# clock input from Home Assistant used to calculate total daily energy
time:
  - platform: homeassistant
    id: homeassistant_time

light:
  - platform: status_led
    id: blue_led
    pin:
      number: GPIO01
      inverted: true

switch:
  - platform: gpio
    pin: GPIO15
    id: relay1
    name: $friendly_name Power Switch 1
  - platform: gpio
    pin: GPIO13
    id: relay2
    name: $friendly_name Power Switch 2
  - platform: gpio
    pin: GPIO14
    id: relay3
    name: $friendly_name Power Switch 3


binary_sensor:
  - platform: gpio
    pin: GPIO16
    id: front_button
    filters:
      - delayed_off: 10ms
    on_press:
      then:
        - switch.toggle: relay1
        - switch.toggle: relay2
        - switch.toggle: relay3
  # Template binary sensor to display if device is in-use or not
  - platform: template
    id: in_use
    name: $friendly_name Device In Use

number:      # used as a threshold for whether the plugged-in devices is running.
  - platform: template
    name: In-Use Power Threshold
    min_value: 1
    max_value: 100
    step: 1
    initial_value: 10
    id: threshold
    entity_category: config
    optimistic: true     # required for changing value from home assistant
    restore_value: true
    unit_of_measurement: Watt(s)
    mode: box
    on_value:
      - if:               # set or clear in_use template binary sensor depending on whether power usage is above threshold
          condition:
            lambda: 'return (id(power).state >= x);'
          then:
            - binary_sensor.template.publish:
                id: in_use
                state: ON
          else:
            - binary_sensor.template.publish:
                id: in_use
                state: OFF


select:
  # option to disable blue LED
  - platform: template
    name: Status LED Config
    id: select_led
    optimistic: true
    entity_category: config
    options:
      - Normal On
      - Normal Off
    initial_option: Normal On
    restore_value: true
    icon: mdi:led-on
    on_value:
      then:
      - if:
          condition:
            lambda: 'return ( (id(select_led).state == "Normal On") );'
          then:
            light.turn_on: blue_led
      - if:
          condition:
            lambda: 'return ( (id(select_led).state == "Normal Off") );'
          then:
            light.turn_off: blue_led